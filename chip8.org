# author: johannst
# chip8 reference

* chip8 reference
** memory map

 0x000 - 0x1ff   interpreter data
 0x200 - 0xe9f   program
 0xea0 - 0xeff   stack
 0xf00 - 0xfff   display refresh

** registers

 V0 .. VF    16x 8bit general purpose register
 VF          flag register (should not be used by the program)

 I           1x 16bit address register

 DT          8bit delay timer register
 ST          8bit sound timer register
 -> when val!=0 they are decremented at rate of 60Hz

 PC          16bit pseudo register - program counter (not accessiable from program)
 SP          8bit pseudo register - stack pointer (not accessiable from program)

** timer

 2 x 60Hz timer:
 delay timer     R/W
 sound timer     val!=0 => make sound

** input

 hex keyboard with 16 keys:
     +---+---+---+---+
     | 1 | 2 | 3 | C |
     +---+---+---+---+
     | 4 | 5 | 6 | D |
     +---+---+---+---+
     | 7 | 8 | 9 | E |
     +---+---+---+---+
     | A | 0 | B | F |
     +---+---+---+---+

** display

 +-----------------------+
 |                       |
 | 64 x 32 screen pixels |
 |      (monochrom)      |
 |                       |
 +-----------------------+

*** drawing

 graphics drawn by sprites of 8 x [1..15] pixels

 sprite pixels and screen are XORd
 VF is set to '1' if any screen pixed has '1' -> '0' transistion
 => indicating collision
 
*** interpreter intrinsic sprites

 there are 16 8x5 pixel sprites in the interpreter memory area to represent
 hex digits '0' - 'F'

** opcodes

 35 x 16bit opcodes (stored in big endian, MSB first)

 instructions in memory should be two byte aligned

* references
  [[http://devernay.free.fr/hacks/chip8/C8TECH10.HTM][Cowgods chip8 reference manual]]
 

